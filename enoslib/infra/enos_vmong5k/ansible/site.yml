---
- name: This is a play for virtual machines on Grid'5000
  hosts: all
  vars:
    pubkey: "{{lookup('file', '~/.ssh/id_rsa.pub')}}"
  tasks:
    - name: Enable nested virtualization
      shell: |
        modprobe -r kvm_intel
        modprobe kvm_intel nested=1

    - name: Add g5k_user to libvirt group
      user:
        name: "{{ g5k_user }}"
        groups: libvirt
        append: yes

    - name: Destroy running virtual machines (vm -1 / 1)
      virt:
        name: "{{ item.alias }}"
        state: destroyed
      ignore_errors: yes
      with_items: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Unregister existing virtual machines (vm -0 / 1)
      virt:
        name: "{{ item.alias }}"
        command: undefine
      ignore_errors: yes
      with_items: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Remove the working directory
      file:
        path: "{{ working_dir }}"
        state: absent
        mode: 0711
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Create the working directory
      file:
        path: "{{ working_dir }}"
        state: directory
        mode: 0711
        recurse: true
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Removing previous cloud init data
      file:
        path: "{{ working_dir }}/cloud-init-data-{{ item.alias }}"
        state: absent
      loop: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Removing previous cloud init data iso
      file:
        path: "{{ working_dir }}/cloud-init-data-{{ item.alias }}.iso"
        state: absent
      loop: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Creating cloud init data directory
      file:
        path: "{{ working_dir }}/cloud-init-data-{{ item.alias }}"
        state: directory
      loop: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Generate meta-data for cloud-init
      template:
        src: meta-data.j2
        dest: "{{ working_dir }}/cloud-init-data-{{ item.alias }}/meta-data"
      loop: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Generate g5k_user data for cloud-init
      template:
        src: user-data.j2
        dest: "{{ working_dir }}/cloud-init-data-{{ item.alias }}/user-data"
      loop: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    #  Create one iso per vm
    - name: Create the iso for cloud-init
      shell: > 
        cd {{ working_dir }} 
        && 
        genisoimage -output cloud-init-data-{{ item.alias }}.iso -volid cidata -joliet -rock cloud-init-data-{{ item.alias }}/user-data cloud-init-data-{{ item.alias }}/meta-data
      loop: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Check base image
      stat:
        path: "{{ base_image }}"
      register: p

    - name: Verify base image accessibility
      fail:
        msg: "Base image does not exist. Verify this path is valid: {{ base_image }}"
      when: p.stat.exists == False

    - name: Copy base image
      shell: > 
        ls {{ working_dir }}/enos_vmong5k-base-image.qcow2 
        || 
        cp {{ base_image }} {{ working_dir }}/enos_vmong5k-base-image.qcow2
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Removing previous disk
      file:
        path: "{{ working_dir }}/{{ item.alias }}"
        state: absent
      with_items: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Applying COW strategy for the image
      shell: |
        qemu-img create -f qcow2 -o backing_file={{ working_dir}}/enos_vmong5k-base-image.qcow2 {{ working_dir }}/{{ item.alias }}
        # I know ...
        chmod 777 {{ working_dir }}/{{ item.alias }}
      with_items: "{{ vms[inventory_hostname] }}"
      when: strategy == "cow"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Applying COPY strategy for the image
      shell: |
        cp {{ working_dir}}/enos_vmong5k-base-image.qcow2 {{ working_dir }}/{{ item.alias }}
        # I know ...
        chmod 777 {{ working_dir }}/{{ item.alias }}
      with_items: "{{ vms[inventory_hostname] }}"
      when: strategy == "copy"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Define virtual machines (vm 0 / 1)
      virt:
        name: "{{ item.alias }}"
        command: define
        xml: "{{ lookup('template', 'domain.xml.j2') }}"
      with_items: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"

    - name: Launch virtual machines (vm 1 / 1)
      virt:
        name: "{{ item.alias }}"
        state: running
      with_items: "{{ vms[inventory_hostname] }}"
      become: yes
      become_user: "{{ g5k_user }}"
