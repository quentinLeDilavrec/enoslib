Tutorial 2 - Working with Grid'5000
===================================

This tutorial illustrates the use of EnOSlib to interact with Grid'5000. For a
full description of the API and the available options, please refer to the API
documentation of the Grid'5000 provider.

.. hint::

   For a complete schema reference see :ref:`grid5000-schema`

Installation
------------

On Grid'5000, you can go with a virtualenv :

.. code-block:: bash

    $ virtualenv venv
    $ source venv/bin/activate
    $ pip install -U pip

    $ pip install enoslib

Basic example
-------------

We'll implement a basic workflow where 2 nodes are reserved and 2 roles are
described. Nodes are here put in a dedicated vlan.


Build the configuration from a dictionnary
******************************************


.. literalinclude:: grid5000/tuto_grid5000.py
   :language: python
   :linenos:

- You can launch the script using :

    .. code-block:: bash

        $ python tuto_grid5000.py


- The content of the generated inventory should looks like the following:

    .. literalinclude:: grid5000/hosts
     :language: python

  .. note::

       - Inventory can be used to feed an Ansible deployment (see the
         :ref:`Ansible integration<integration-with-ansible>`)
       - Compared to the vagrant provider, Grid'5000 requires a more precise
         network description that should map what is available on the platform.

Build the configuration programmatically
****************************************

The above script can be rewritten using the programmatc API.

.. literalinclude:: grid5000/tuto_grid5000_p.py
   :language: python
   :linenos:

.. note::

   Here we first create a network and pass its reference to each group of
   machine to configure the first interface of the Grid'5000 nodes.


Subnet reservation
------------------

This shows how to deal with a subnet reservation

Build the configuration from a dictionnary
******************************************

.. literalinclude:: grid5000/tuto_grid5000_subnet.py
    :language: python
    :linenos:

Build the configuration programmatically
****************************************

.. literalinclude:: grid5000/tuto_grid5000_subnet_p.py
    :language: python
    :linenos:

Non deploy reservation
----------------------

The following shows how to deal with a non deploy reservation. Root ssh access
will be granted to the nodes. For this purpose you must have a
``~/.ssh/id_rsa.pub`` file available. All the connections will be done as root
user allowing to mimic the behaviour of deploy jobs (without the kadeploy3
step). This is particularly interesting if your deployment does't require more
than one network interface.

Build the configuration from a dictionnary
******************************************

.. literalinclude:: grid5000/tuto_grid5000_non_deploy.py
    :language: python
    :linenos:

Build the configuration programmatically
****************************************

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_p.py
    :language: python
    :linenos:


More complete example
---------------------

You can found it `here
<https://github.com/BeyondTheClouds/enoslib/tree/master/docs/tutorials/grid5000/virt>`_.
It starts reserve non-deploy nodes and a subnet and start virtual machines on
them.

.. hint::
  Note that it is now possible to use the ``VMonG5k`` provider directly.
